Az adatbázis létrehozásakor a következőképpen titkosíthatja a Password VARCHAR(255) NOT NULL adattípust:

SQL
CREATE TABLE Users (
  id INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);

CREATE TRIGGER `password_hash` BEFORE INSERT ON `Users` FOR EACH ROW
BEGIN
  SET NEW.password = sha2(CONCAT(NEW.password, 'salt'), 256);
END;
Legyen körültekintő a kód használatakor. További információ.
Ez az utasítás létrehoz egy password_hash nevű triggert, amely minden beszúrás előtt fut. A trigger hozzáad egy véletlenszerű sót a jelszóhoz, majd a jelszót és a sót együtt hasheli a SHA-256 algoritmussal. A hash-értéket a password mezőben tárolja.

A salt mezőt véletlenszerű karakterláncként kell létrehozni. A következő SQL-utasítást használhatja ehhez:

SQL
CREATE FUNCTION `salt()` RETURNS VARCHAR(255)
BEGIN
  RETURN md5(RAND());
END;
Legyen körültekintő a kód használatakor. További információ.
Ez a függvény minden beszúrás előtt véletlenszerű sót generál.

A fenti módosítások után az adatbázis a következőképpen fog kinézni:

SQL
CREATE TABLE Users (
  id INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);

CREATE FUNCTION `salt()` RETURNS VARCHAR(255)
BEGIN
  RETURN md5(RAND());
END;

CREATE TRIGGER `password_hash` BEFORE INSERT ON `Users` FOR EACH ROW
BEGIN
  SET NEW.password = sha2(CONCAT(NEW.password, salt()), 256);
END;
Legyen körültekintő a kód használatakor. További információ.
A password mező a következőképpen fog kinézni:

$2y$12$salt123...456...
$2y$12$salt789...012...
Ezeket a hash-értékeket nehéz feltörni, még akkor is, ha egy támadó hozzáfér ahhoz.

Ha még biztonságosabb titkosítást szeretne, akkor használhatja a bcrypt hash-függvényt. A következő SQL-utasításokat használhatja ehhez:

SQL
CREATE FUNCTION `salt()` RETURNS VARCHAR(255)
BEGIN
  RETURN md5(RAND());
END;

CREATE TRIGGER `password_hash` BEFORE INSERT ON `Users` FOR EACH ROW
BEGIN
  SET NEW.password = bcrypt(NEW.password, 10);
END;
Legyen körültekintő a kód használatakor. További információ.
Ez az utasítás a bcrypt hash-függvényt használja a jelszó titkosításához. Az 10 paraméter a hash-folyamat iterációs számát jelzi. Minél magasabb az iterációs szám, annál biztonságosabb lesz a hash-érték.

A fenti módosítások után az adatbázis a következőképpen fog kinézni:

SQL
CREATE TABLE Users (
  id INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  PRIMARY KEY (id)
);

CREATE FUNCTION `salt()` RETURNS VARCHAR(255)
BEGIN
  RETURN md5(RAND());
END;

CREATE TRIGGER `password_hash` BEFORE INSERT ON `Users` FOR EACH ROW
BEGIN
  SET NEW.password = bcrypt(NEW.password, 10);
END;
Legyen körültekintő a kód használatakor. További információ.
A password mező a következőképpen fog kinézni:

$2a$10$salt123...456...
$2a$10$salt789...012...
Ezeket a hash-értékeket még nehezebb feltörni, mint a SHA-256 hash-értékeket.